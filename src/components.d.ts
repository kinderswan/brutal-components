/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BrutalSelectItem } from "./components/brutal-select/brutal-select";
export { BrutalSelectItem } from "./components/brutal-select/brutal-select";
export namespace Components {
    interface BrutalButton {
        "autofocus": HTMLButtonElement['autofocus'];
        "color": 'primary' | 'accent';
        "disabled": boolean;
        "form": string;
        "name": string;
        "size": 'md' | 'lg';
        "type": HTMLButtonElement['type'];
    }
    interface BrutalInput {
        "disabled": HTMLInputElement['disabled'];
        "placeholder": HTMLInputElement['placeholder'];
        "value": HTMLInputElement['value'];
    }
    interface BrutalSelect {
        "disabled": boolean;
        "multiple": boolean;
        "options": BrutalSelectItem[];
        "placeholder": string;
        "trackBy": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SideNav {
    }
}
export interface BrutalButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrutalButtonElement;
}
export interface BrutalInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrutalInputElement;
}
declare global {
    interface HTMLBrutalButtonElement extends Components.BrutalButton, HTMLStencilElement {
    }
    var HTMLBrutalButtonElement: {
        prototype: HTMLBrutalButtonElement;
        new (): HTMLBrutalButtonElement;
    };
    interface HTMLBrutalInputElement extends Components.BrutalInput, HTMLStencilElement {
    }
    var HTMLBrutalInputElement: {
        prototype: HTMLBrutalInputElement;
        new (): HTMLBrutalInputElement;
    };
    interface HTMLBrutalSelectElement extends Components.BrutalSelect, HTMLStencilElement {
    }
    var HTMLBrutalSelectElement: {
        prototype: HTMLBrutalSelectElement;
        new (): HTMLBrutalSelectElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSideNavElement extends Components.SideNav, HTMLStencilElement {
    }
    var HTMLSideNavElement: {
        prototype: HTMLSideNavElement;
        new (): HTMLSideNavElement;
    };
    interface HTMLElementTagNameMap {
        "brutal-button": HTMLBrutalButtonElement;
        "brutal-input": HTMLBrutalInputElement;
        "brutal-select": HTMLBrutalSelectElement;
        "my-component": HTMLMyComponentElement;
        "side-nav": HTMLSideNavElement;
    }
}
declare namespace LocalJSX {
    interface BrutalButton {
        "autofocus"?: HTMLButtonElement['autofocus'];
        "color"?: 'primary' | 'accent';
        "disabled"?: boolean;
        "form"?: string;
        "name"?: string;
        "onClicked"?: (event: BrutalButtonCustomEvent<PointerEvent>) => void;
        "onResetted"?: (event: BrutalButtonCustomEvent<PointerEvent>) => void;
        "onSubmitted"?: (event: BrutalButtonCustomEvent<PointerEvent>) => void;
        "size"?: 'md' | 'lg';
        "type"?: HTMLButtonElement['type'];
    }
    interface BrutalInput {
        "disabled"?: HTMLInputElement['disabled'];
        "onValueChanged"?: (event: BrutalInputCustomEvent<HTMLInputElement['value']>) => void;
        "placeholder"?: HTMLInputElement['placeholder'];
        "value"?: HTMLInputElement['value'];
    }
    interface BrutalSelect {
        "disabled"?: boolean;
        "multiple"?: boolean;
        "options"?: BrutalSelectItem[];
        "placeholder"?: string;
        "trackBy"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SideNav {
    }
    interface IntrinsicElements {
        "brutal-button": BrutalButton;
        "brutal-input": BrutalInput;
        "brutal-select": BrutalSelect;
        "my-component": MyComponent;
        "side-nav": SideNav;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "brutal-button": LocalJSX.BrutalButton & JSXBase.HTMLAttributes<HTMLBrutalButtonElement>;
            "brutal-input": LocalJSX.BrutalInput & JSXBase.HTMLAttributes<HTMLBrutalInputElement>;
            "brutal-select": LocalJSX.BrutalSelect & JSXBase.HTMLAttributes<HTMLBrutalSelectElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "side-nav": LocalJSX.SideNav & JSXBase.HTMLAttributes<HTMLSideNavElement>;
        }
    }
}
